# Generated from /home/crisvo/.config/sublime-text-3/Packages/pep8-sublime/grammar/Python3.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3e")
        buf.write("\u045e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\3\2\3\2\3\2\3\2\3\2\5\2\u00b8\n\2")
        buf.write("\3\3\3\3\7\3\u00bc\n\3\f\3\16\3\u00bf\13\3\3\3\3\3\3\4")
        buf.write("\3\4\7\4\u00c5\n\4\f\4\16\4\u00c8\13\4\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\5\5\5\u00d0\n\5\3\5\3\5\5\5\u00d4\n\5\3\5\3\5\3")
        buf.write("\6\6\6\u00d9\n\6\r\6\16\6\u00da\3\7\3\7\3\7\3\7\5\7\u00e1")
        buf.write("\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\5\t\u00eb\n\t\3\t")
        buf.write("\3\t\3\t\3\n\3\n\5\n\u00f2\n\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\5\13\u00f9\n\13\3\13\3\13\3\13\3\13\5\13\u00ff\n\13\7")
        buf.write("\13\u0101\n\13\f\13\16\13\u0104\13\13\3\13\3\13\3\13\5")
        buf.write("\13\u0109\n\13\3\13\3\13\3\13\3\13\5\13\u010f\n\13\7\13")
        buf.write("\u0111\n\13\f\13\16\13\u0114\13\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u011a\n\13\5\13\u011c\n\13\5\13\u011e\n\13\3\13")
        buf.write("\3\13\3\13\5\13\u0123\n\13\5\13\u0125\n\13\5\13\u0127")
        buf.write("\n\13\3\13\3\13\5\13\u012b\n\13\3\13\3\13\3\13\3\13\5")
        buf.write("\13\u0131\n\13\7\13\u0133\n\13\f\13\16\13\u0136\13\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u013c\n\13\5\13\u013e\n\13\5")
        buf.write("\13\u0140\n\13\3\13\3\13\3\13\5\13\u0145\n\13\5\13\u0147")
        buf.write("\n\13\3\f\3\f\3\f\5\f\u014c\n\f\3\r\3\r\3\r\5\r\u0151")
        buf.write("\n\r\3\r\3\r\3\r\3\r\5\r\u0157\n\r\7\r\u0159\n\r\f\r\16")
        buf.write("\r\u015c\13\r\3\r\3\r\3\r\5\r\u0161\n\r\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u0167\n\r\7\r\u0169\n\r\f\r\16\r\u016c\13\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u0172\n\r\5\r\u0174\n\r\5\r\u0176\n\r")
        buf.write("\3\r\3\r\3\r\5\r\u017b\n\r\5\r\u017d\n\r\5\r\u017f\n\r")
        buf.write("\3\r\3\r\5\r\u0183\n\r\3\r\3\r\3\r\3\r\5\r\u0189\n\r\7")
        buf.write("\r\u018b\n\r\f\r\16\r\u018e\13\r\3\r\3\r\3\r\3\r\5\r\u0194")
        buf.write("\n\r\5\r\u0196\n\r\5\r\u0198\n\r\3\r\3\r\3\r\5\r\u019d")
        buf.write("\n\r\5\r\u019f\n\r\3\16\3\16\3\17\3\17\5\17\u01a5\n\17")
        buf.write("\3\20\3\20\3\20\7\20\u01aa\n\20\f\20\16\20\u01ad\13\20")
        buf.write("\3\20\5\20\u01b0\n\20\3\20\3\20\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u01bc\n\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u01c3\n\22\3\22\3\22\3\22\5\22\u01c8\n\22\7")
        buf.write("\22\u01ca\n\22\f\22\16\22\u01cd\13\22\5\22\u01cf\n\22")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u01d5\n\23\3\24\3\24\5\24\u01d9")
        buf.write("\n\24\3\24\3\24\3\24\5\24\u01de\n\24\7\24\u01e0\n\24\f")
        buf.write("\24\16\24\u01e3\13\24\3\24\5\24\u01e6\n\24\3\25\3\25\3")
        buf.write("\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u01f4\n\30\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u01fc\n")
        buf.write("\33\3\34\3\34\3\35\3\35\3\35\3\35\5\35\u0204\n\35\5\35")
        buf.write("\u0206\n\35\3\36\3\36\5\36\u020a\n\36\3\37\3\37\3\37\3")
        buf.write(" \3 \7 \u0211\n \f \16 \u0214\13 \3 \3 \6 \u0218\n \r")
        buf.write(" \16 \u0219\5 \u021c\n \3 \3 \3 \3 \3 \3 \3 \5 \u0225")
        buf.write("\n \3!\3!\3!\5!\u022a\n!\3\"\3\"\3\"\5\"\u022f\n\"\3#")
        buf.write("\3#\3#\7#\u0234\n#\f#\16#\u0237\13#\3#\5#\u023a\n#\3$")
        buf.write("\3$\3$\7$\u023f\n$\f$\16$\u0242\13$\3%\3%\3%\7%\u0247")
        buf.write("\n%\f%\16%\u024a\13%\3&\3&\3&\3&\7&\u0250\n&\f&\16&\u0253")
        buf.write("\13&\3\'\3\'\3\'\3\'\7\'\u0259\n\'\f\'\16\'\u025c\13\'")
        buf.write("\3(\3(\3(\3(\5(\u0262\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\5")
        buf.write(")\u026d\n)\3*\3*\3*\3*\5*\u0273\n*\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\7+\u027e\n+\f+\16+\u0281\13+\3+\3+\3+\5+\u0286")
        buf.write("\n+\3,\3,\3,\3,\3,\3,\3,\5,\u028f\n,\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\5-\u029a\n-\3.\3.\3.\3.\3.\3.\3.\6.\u02a3\n")
        buf.write(".\r.\16.\u02a4\3.\3.\3.\5.\u02aa\n.\3.\3.\3.\5.\u02af")
        buf.write("\n.\3.\3.\3.\5.\u02b4\n.\3/\3/\3/\3/\7/\u02ba\n/\f/\16")
        buf.write("/\u02bd\13/\3/\3/\3/\3\60\3\60\3\60\5\60\u02c5\n\60\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u02cb\n\61\5\61\u02cd\n\61\3\62")
        buf.write("\3\62\3\62\3\62\6\62\u02d3\n\62\r\62\16\62\u02d4\3\62")
        buf.write("\3\62\5\62\u02d9\n\62\3\63\3\63\3\63\3\63\3\63\3\63\5")
        buf.write("\63\u02e1\n\63\3\63\5\63\u02e4\n\63\3\64\3\64\5\64\u02e8")
        buf.write("\n\64\3\65\3\65\5\65\u02ec\n\65\3\65\3\65\3\65\3\66\3")
        buf.write("\66\5\66\u02f3\n\66\3\66\3\66\3\66\3\67\3\67\3\67\7\67")
        buf.write("\u02fb\n\67\f\67\16\67\u02fe\13\67\38\38\38\78\u0303\n")
        buf.write("8\f8\168\u0306\138\39\39\39\59\u030b\n9\3:\3:\3:\3:\7")
        buf.write(":\u0311\n:\f:\16:\u0314\13:\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\5;\u0323\n;\3<\3<\3<\3=\3=\3=\7=\u032b\n")
        buf.write("=\f=\16=\u032e\13=\3>\3>\3>\7>\u0333\n>\f>\16>\u0336\13")
        buf.write(">\3?\3?\3?\7?\u033b\n?\f?\16?\u033e\13?\3@\3@\3@\7@\u0343")
        buf.write("\n@\f@\16@\u0346\13@\3A\3A\3A\7A\u034b\nA\fA\16A\u034e")
        buf.write("\13A\3B\3B\3B\7B\u0353\nB\fB\16B\u0356\13B\3C\3C\3C\5")
        buf.write("C\u035b\nC\3D\3D\3D\5D\u0360\nD\3E\5E\u0363\nE\3E\3E\7")
        buf.write("E\u0367\nE\fE\16E\u036a\13E\3F\3F\3F\5F\u036f\nF\3F\3")
        buf.write("F\3F\3F\5F\u0375\nF\3F\3F\3F\5F\u037a\nF\3F\3F\3F\3F\6")
        buf.write("F\u0380\nF\rF\16F\u0381\3F\3F\3F\3F\5F\u0388\nF\3G\3G")
        buf.write("\5G\u038c\nG\3G\3G\3G\3G\5G\u0392\nG\7G\u0394\nG\fG\16")
        buf.write("G\u0397\13G\3G\5G\u039a\nG\5G\u039c\nG\3H\3H\5H\u03a0")
        buf.write("\nH\3H\3H\3H\3H\3H\3H\3H\3H\5H\u03aa\nH\3I\3I\3I\7I\u03af")
        buf.write("\nI\fI\16I\u03b2\13I\3I\5I\u03b5\nI\3J\3J\5J\u03b9\nJ")
        buf.write("\3J\3J\5J\u03bd\nJ\3J\5J\u03c0\nJ\5J\u03c2\nJ\3K\3K\5")
        buf.write("K\u03c6\nK\3L\3L\5L\u03ca\nL\3L\3L\3L\5L\u03cf\nL\7L\u03d1")
        buf.write("\nL\fL\16L\u03d4\13L\3L\5L\u03d7\nL\3M\3M\3M\7M\u03dc")
        buf.write("\nM\fM\16M\u03df\13M\3M\5M\u03e2\nM\3N\3N\3N\3N\3N\3N")
        buf.write("\5N\u03ea\nN\3N\3N\3N\3N\3N\3N\3N\3N\5N\u03f4\nN\7N\u03f6")
        buf.write("\nN\fN\16N\u03f9\13N\3N\5N\u03fc\nN\5N\u03fe\nN\3N\3N")
        buf.write("\5N\u0402\nN\3N\3N\3N\3N\5N\u0408\nN\7N\u040a\nN\fN\16")
        buf.write("N\u040d\13N\3N\5N\u0410\nN\5N\u0412\nN\5N\u0414\nN\3O")
        buf.write("\3O\3O\3O\5O\u041a\nO\3O\3O\5O\u041e\nO\3O\3O\3O\3P\3")
        buf.write("P\3P\7P\u0426\nP\fP\16P\u0429\13P\3P\5P\u042c\nP\3Q\3")
        buf.write("Q\5Q\u0430\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u043a\nQ\3R\3")
        buf.write("R\5R\u043e\nR\3S\5S\u0441\nS\3S\3S\3S\3S\3S\5S\u0448\n")
        buf.write("S\3T\3T\3T\5T\u044d\nT\3U\3U\3V\3V\5V\u0453\nV\3W\3W\3")
        buf.write("W\5W\u0458\nW\3X\3X\3Y\3Y\3Y\2\2Z\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\2\b\3\2Ua\3\2\63\64\3\2BC\3\2DE\5\2\65\65")
        buf.write("FHSS\4\2DEII\2\u04d9\2\u00b7\3\2\2\2\4\u00bd\3\2\2\2\6")
        buf.write("\u00c2\3\2\2\2\b\u00cb\3\2\2\2\n\u00d8\3\2\2\2\f\u00dc")
        buf.write("\3\2\2\2\16\u00e2\3\2\2\2\20\u00e5\3\2\2\2\22\u00ef\3")
        buf.write("\2\2\2\24\u0146\3\2\2\2\26\u0148\3\2\2\2\30\u019e\3\2")
        buf.write("\2\2\32\u01a0\3\2\2\2\34\u01a4\3\2\2\2\36\u01a6\3\2\2")
        buf.write("\2 \u01bb\3\2\2\2\"\u01bd\3\2\2\2$\u01d0\3\2\2\2&\u01d8")
        buf.write("\3\2\2\2(\u01e7\3\2\2\2*\u01e9\3\2\2\2,\u01ec\3\2\2\2")
        buf.write(".\u01f3\3\2\2\2\60\u01f5\3\2\2\2\62\u01f7\3\2\2\2\64\u01f9")
        buf.write("\3\2\2\2\66\u01fd\3\2\2\28\u01ff\3\2\2\2:\u0209\3\2\2")
        buf.write("\2<\u020b\3\2\2\2>\u020e\3\2\2\2@\u0226\3\2\2\2B\u022b")
        buf.write("\3\2\2\2D\u0230\3\2\2\2F\u023b\3\2\2\2H\u0243\3\2\2\2")
        buf.write("J\u024b\3\2\2\2L\u0254\3\2\2\2N\u025d\3\2\2\2P\u026c\3")
        buf.write("\2\2\2R\u026e\3\2\2\2T\u0274\3\2\2\2V\u0287\3\2\2\2X\u0290")
        buf.write("\3\2\2\2Z\u029b\3\2\2\2\\\u02b5\3\2\2\2^\u02c1\3\2\2\2")
        buf.write("`\u02c6\3\2\2\2b\u02d8\3\2\2\2d\u02e3\3\2\2\2f\u02e7\3")
        buf.write("\2\2\2h\u02e9\3\2\2\2j\u02f0\3\2\2\2l\u02f7\3\2\2\2n\u02ff")
        buf.write("\3\2\2\2p\u030a\3\2\2\2r\u030c\3\2\2\2t\u0322\3\2\2\2")
        buf.write("v\u0324\3\2\2\2x\u0327\3\2\2\2z\u032f\3\2\2\2|\u0337\3")
        buf.write("\2\2\2~\u033f\3\2\2\2\u0080\u0347\3\2\2\2\u0082\u034f")
        buf.write("\3\2\2\2\u0084\u035a\3\2\2\2\u0086\u035c\3\2\2\2\u0088")
        buf.write("\u0362\3\2\2\2\u008a\u0387\3\2\2\2\u008c\u038b\3\2\2\2")
        buf.write("\u008e\u03a9\3\2\2\2\u0090\u03ab\3\2\2\2\u0092\u03c1\3")
        buf.write("\2\2\2\u0094\u03c3\3\2\2\2\u0096\u03c9\3\2\2\2\u0098\u03d8")
        buf.write("\3\2\2\2\u009a\u0413\3\2\2\2\u009c\u0415\3\2\2\2\u009e")
        buf.write("\u0422\3\2\2\2\u00a0\u0439\3\2\2\2\u00a2\u043d\3\2\2\2")
        buf.write("\u00a4\u0440\3\2\2\2\u00a6\u0449\3\2\2\2\u00a8\u044e\3")
        buf.write("\2\2\2\u00aa\u0450\3\2\2\2\u00ac\u0457\3\2\2\2\u00ae\u0459")
        buf.write("\3\2\2\2\u00b0\u045b\3\2\2\2\u00b2\u00b8\7)\2\2\u00b3")
        buf.write("\u00b8\5\36\20\2\u00b4\u00b5\5P)\2\u00b5\u00b6\7)\2\2")
        buf.write("\u00b6\u00b8\3\2\2\2\u00b7\u00b2\3\2\2\2\u00b7\u00b3\3")
        buf.write("\2\2\2\u00b7\u00b4\3\2\2\2\u00b8\3\3\2\2\2\u00b9\u00bc")
        buf.write("\7)\2\2\u00ba\u00bc\5\34\17\2\u00bb\u00b9\3\2\2\2\u00bb")
        buf.write("\u00ba\3\2\2\2\u00bc\u00bf\3\2\2\2\u00bd\u00bb\3\2\2\2")
        buf.write("\u00bd\u00be\3\2\2\2\u00be\u00c0\3\2\2\2\u00bf\u00bd\3")
        buf.write("\2\2\2\u00c0\u00c1\7\2\2\3\u00c1\5\3\2\2\2\u00c2\u00c6")
        buf.write("\5\u0098M\2\u00c3\u00c5\7)\2\2\u00c4\u00c3\3\2\2\2\u00c5")
        buf.write("\u00c8\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2")
        buf.write("\u00c7\u00c9\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c9\u00ca\7")
        buf.write("\2\2\3\u00ca\7\3\2\2\2\u00cb\u00cc\7S\2\2\u00cc\u00d3")
        buf.write("\5H%\2\u00cd\u00cf\5\u00aeX\2\u00ce\u00d0\5\u009eP\2\u00cf")
        buf.write("\u00ce\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d1\3\2\2\2")
        buf.write("\u00d1\u00d2\5\u00b0Y\2\u00d2\u00d4\3\2\2\2\u00d3\u00cd")
        buf.write("\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\u00d6\7)\2\2\u00d6\t\3\2\2\2\u00d7\u00d9\5\b\5\2\u00d8")
        buf.write("\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00da\u00db\3\2\2\2\u00db\13\3\2\2\2\u00dc\u00e0\5\n")
        buf.write("\6\2\u00dd\u00e1\5\u009cO\2\u00de\u00e1\5\20\t\2\u00df")
        buf.write("\u00e1\5\16\b\2\u00e0\u00dd\3\2\2\2\u00e0\u00de\3\2\2")
        buf.write("\2\u00e0\u00df\3\2\2\2\u00e1\r\3\2\2\2\u00e2\u00e3\7\'")
        buf.write("\2\2\u00e3\u00e4\5\20\t\2\u00e4\17\3\2\2\2\u00e5\u00e6")
        buf.write("\7\6\2\2\u00e6\u00e7\7*\2\2\u00e7\u00ea\5\22\n\2\u00e8")
        buf.write("\u00e9\7T\2\2\u00e9\u00eb\5d\63\2\u00ea\u00e8\3\2\2\2")
        buf.write("\u00ea\u00eb\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\7")
        buf.write("9\2\2\u00ed\u00ee\5b\62\2\u00ee\21\3\2\2\2\u00ef\u00f1")
        buf.write("\5\u00aeX\2\u00f0\u00f2\5\24\13\2\u00f1\u00f0\3\2\2\2")
        buf.write("\u00f1\u00f2\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f4\5")
        buf.write("\u00b0Y\2\u00f4\23\3\2\2\2\u00f5\u00f8\5\26\f\2\u00f6")
        buf.write("\u00f7\7<\2\2\u00f7\u00f9\5d\63\2\u00f8\u00f6\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9\u0102\3\2\2\2\u00fa\u00fb\7")
        buf.write("8\2\2\u00fb\u00fe\5\26\f\2\u00fc\u00fd\7<\2\2\u00fd\u00ff")
        buf.write("\5d\63\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff")
        buf.write("\u0101\3\2\2\2\u0100\u00fa\3\2\2\2\u0101\u0104\3\2\2\2")
        buf.write("\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0126\3")
        buf.write("\2\2\2\u0104\u0102\3\2\2\2\u0105\u0124\78\2\2\u0106\u0108")
        buf.write("\7\65\2\2\u0107\u0109\5\26\f\2\u0108\u0107\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\u0112\3\2\2\2\u010a\u010b\78\2\2")
        buf.write("\u010b\u010e\5\26\f\2\u010c\u010d\7<\2\2\u010d\u010f\5")
        buf.write("d\63\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111")
        buf.write("\3\2\2\2\u0110\u010a\3\2\2\2\u0111\u0114\3\2\2\2\u0112")
        buf.write("\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u011d\3\2\2\2")
        buf.write("\u0114\u0112\3\2\2\2\u0115\u011b\78\2\2\u0116\u0117\7")
        buf.write(";\2\2\u0117\u0119\5\26\f\2\u0118\u011a\78\2\2\u0119\u0118")
        buf.write("\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\3\2\2\2\u011b")
        buf.write("\u0116\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\3\2\2\2")
        buf.write("\u011d\u0115\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u0125\3")
        buf.write("\2\2\2\u011f\u0120\7;\2\2\u0120\u0122\5\26\f\2\u0121\u0123")
        buf.write("\78\2\2\u0122\u0121\3\2\2\2\u0122\u0123\3\2\2\2\u0123")
        buf.write("\u0125\3\2\2\2\u0124\u0106\3\2\2\2\u0124\u011f\3\2\2\2")
        buf.write("\u0124\u0125\3\2\2\2\u0125\u0127\3\2\2\2\u0126\u0105\3")
        buf.write("\2\2\2\u0126\u0127\3\2\2\2\u0127\u0147\3\2\2\2\u0128\u012a")
        buf.write("\7\65\2\2\u0129\u012b\5\26\f\2\u012a\u0129\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u0134\3\2\2\2\u012c\u012d\78\2\2")
        buf.write("\u012d\u0130\5\26\f\2\u012e\u012f\7<\2\2\u012f\u0131\5")
        buf.write("d\63\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133")
        buf.write("\3\2\2\2\u0132\u012c\3\2\2\2\u0133\u0136\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u013f\3\2\2\2")
        buf.write("\u0136\u0134\3\2\2\2\u0137\u013d\78\2\2\u0138\u0139\7")
        buf.write(";\2\2\u0139\u013b\5\26\f\2\u013a\u013c\78\2\2\u013b\u013a")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d")
        buf.write("\u0138\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2")
        buf.write("\u013f\u0137\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0147\3")
        buf.write("\2\2\2\u0141\u0142\7;\2\2\u0142\u0144\5\26\f\2\u0143\u0145")
        buf.write("\78\2\2\u0144\u0143\3\2\2\2\u0144\u0145\3\2\2\2\u0145")
        buf.write("\u0147\3\2\2\2\u0146\u00f5\3\2\2\2\u0146\u0128\3\2\2\2")
        buf.write("\u0146\u0141\3\2\2\2\u0147\25\3\2\2\2\u0148\u014b\7*\2")
        buf.write("\2\u0149\u014a\79\2\2\u014a\u014c\5d\63\2\u014b\u0149")
        buf.write("\3\2\2\2\u014b\u014c\3\2\2\2\u014c\27\3\2\2\2\u014d\u0150")
        buf.write("\5\32\16\2\u014e\u014f\7<\2\2\u014f\u0151\5d\63\2\u0150")
        buf.write("\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u015a\3\2\2\2")
        buf.write("\u0152\u0153\78\2\2\u0153\u0156\5\32\16\2\u0154\u0155")
        buf.write("\7<\2\2\u0155\u0157\5d\63\2\u0156\u0154\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0152\3\2\2\2")
        buf.write("\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3")
        buf.write("\2\2\2\u015b\u017e\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u017c")
        buf.write("\78\2\2\u015e\u0160\7\65\2\2\u015f\u0161\5\32\16\2\u0160")
        buf.write("\u015f\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u016a\3\2\2\2")
        buf.write("\u0162\u0163\78\2\2\u0163\u0166\5\32\16\2\u0164\u0165")
        buf.write("\7<\2\2\u0165\u0167\5d\63\2\u0166\u0164\3\2\2\2\u0166")
        buf.write("\u0167\3\2\2\2\u0167\u0169\3\2\2\2\u0168\u0162\3\2\2\2")
        buf.write("\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3")
        buf.write("\2\2\2\u016b\u0175\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u0173")
        buf.write("\78\2\2\u016e\u016f\7;\2\2\u016f\u0171\5\32\16\2\u0170")
        buf.write("\u0172\78\2\2\u0171\u0170\3\2\2\2\u0171\u0172\3\2\2\2")
        buf.write("\u0172\u0174\3\2\2\2\u0173\u016e\3\2\2\2\u0173\u0174\3")
        buf.write("\2\2\2\u0174\u0176\3\2\2\2\u0175\u016d\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u017d\3\2\2\2\u0177\u0178\7;\2\2\u0178")
        buf.write("\u017a\5\32\16\2\u0179\u017b\78\2\2\u017a\u0179\3\2\2")
        buf.write("\2\u017a\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u015e")
        buf.write("\3\2\2\2\u017c\u0177\3\2\2\2\u017c\u017d\3\2\2\2\u017d")
        buf.write("\u017f\3\2\2\2\u017e\u015d\3\2\2\2\u017e\u017f\3\2\2\2")
        buf.write("\u017f\u019f\3\2\2\2\u0180\u0182\7\65\2\2\u0181\u0183")
        buf.write("\5\32\16\2\u0182\u0181\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write("\u018c\3\2\2\2\u0184\u0185\78\2\2\u0185\u0188\5\32\16")
        buf.write("\2\u0186\u0187\7<\2\2\u0187\u0189\5d\63\2\u0188\u0186")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018b\3\2\2\2\u018a")
        buf.write("\u0184\3\2\2\2\u018b\u018e\3\2\2\2\u018c\u018a\3\2\2\2")
        buf.write("\u018c\u018d\3\2\2\2\u018d\u0197\3\2\2\2\u018e\u018c\3")
        buf.write("\2\2\2\u018f\u0195\78\2\2\u0190\u0191\7;\2\2\u0191\u0193")
        buf.write("\5\32\16\2\u0192\u0194\78\2\2\u0193\u0192\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194\u0196\3\2\2\2\u0195\u0190\3\2\2\2")
        buf.write("\u0195\u0196\3\2\2\2\u0196\u0198\3\2\2\2\u0197\u018f\3")
        buf.write("\2\2\2\u0197\u0198\3\2\2\2\u0198\u019f\3\2\2\2\u0199\u019a")
        buf.write("\7;\2\2\u019a\u019c\5\32\16\2\u019b\u019d\78\2\2\u019c")
        buf.write("\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019f\3\2\2\2")
        buf.write("\u019e\u014d\3\2\2\2\u019e\u0180\3\2\2\2\u019e\u0199\3")
        buf.write("\2\2\2\u019f\31\3\2\2\2\u01a0\u01a1\7*\2\2\u01a1\33\3")
        buf.write("\2\2\2\u01a2\u01a5\5\36\20\2\u01a3\u01a5\5P)\2\u01a4\u01a2")
        buf.write("\3\2\2\2\u01a4\u01a3\3\2\2\2\u01a5\35\3\2\2\2\u01a6\u01ab")
        buf.write("\5 \21\2\u01a7\u01a8\7:\2\2\u01a8\u01aa\5 \21\2\u01a9")
        buf.write("\u01a7\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3")
        buf.write("\2\2\2\u01ae\u01b0\7:\2\2\u01af\u01ae\3\2\2\2\u01af\u01b0")
        buf.write("\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\7)\2\2\u01b2")
        buf.write("\37\3\2\2\2\u01b3\u01bc\5\"\22\2\u01b4\u01bc\5*\26\2\u01b5")
        buf.write("\u01bc\5,\27\2\u01b6\u01bc\5.\30\2\u01b7\u01bc\5:\36\2")
        buf.write("\u01b8\u01bc\5J&\2\u01b9\u01bc\5L\'\2\u01ba\u01bc\5N(")
        buf.write("\2\u01bb\u01b3\3\2\2\2\u01bb\u01b4\3\2\2\2\u01bb\u01b5")
        buf.write("\3\2\2\2\u01bb\u01b6\3\2\2\2\u01bb\u01b7\3\2\2\2\u01bb")
        buf.write("\u01b8\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01ba\3\2\2\2")
        buf.write("\u01bc!\3\2\2\2\u01bd\u01ce\5&\24\2\u01be\u01cf\5$\23")
        buf.write("\2\u01bf\u01c2\5(\25\2\u01c0\u01c3\5\u00aaV\2\u01c1\u01c3")
        buf.write("\5\u0098M\2\u01c2\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2\u01c3")
        buf.write("\u01cf\3\2\2\2\u01c4\u01c7\7<\2\2\u01c5\u01c8\5\u00aa")
        buf.write("V\2\u01c6\u01c8\5&\24\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c8\u01ca\3\2\2\2\u01c9\u01c4\3\2\2\2\u01ca")
        buf.write("\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2\u01ce\u01be\3")
        buf.write("\2\2\2\u01ce\u01bf\3\2\2\2\u01ce\u01cb\3\2\2\2\u01cf#")
        buf.write("\3\2\2\2\u01d0\u01d1\79\2\2\u01d1\u01d4\5d\63\2\u01d2")
        buf.write("\u01d3\7<\2\2\u01d3\u01d5\5d\63\2\u01d4\u01d2\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5%\3\2\2\2\u01d6\u01d9\5d\63")
        buf.write("\2\u01d7\u01d9\5v<\2\u01d8\u01d6\3\2\2\2\u01d8\u01d7\3")
        buf.write("\2\2\2\u01d9\u01e1\3\2\2\2\u01da\u01dd\78\2\2\u01db\u01de")
        buf.write("\5d\63\2\u01dc\u01de\5v<\2\u01dd\u01db\3\2\2\2\u01dd\u01dc")
        buf.write("\3\2\2\2\u01de\u01e0\3\2\2\2\u01df\u01da\3\2\2\2\u01e0")
        buf.write("\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e6\7")
        buf.write("8\2\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\'")
        buf.write("\3\2\2\2\u01e7\u01e8\t\2\2\2\u01e8)\3\2\2\2\u01e9\u01ea")
        buf.write("\7#\2\2\u01ea\u01eb\5\u0096L\2\u01eb+\3\2\2\2\u01ec\u01ed")
        buf.write("\7$\2\2\u01ed-\3\2\2\2\u01ee\u01f4\5\60\31\2\u01ef\u01f4")
        buf.write("\5\62\32\2\u01f0\u01f4\5\64\33\2\u01f1\u01f4\58\35\2\u01f2")
        buf.write("\u01f4\5\66\34\2\u01f3\u01ee\3\2\2\2\u01f3\u01ef\3\2\2")
        buf.write("\2\u01f3\u01f0\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f2")
        buf.write("\3\2\2\2\u01f4/\3\2\2\2\u01f5\u01f6\7&\2\2\u01f6\61\3")
        buf.write("\2\2\2\u01f7\u01f8\7%\2\2\u01f8\63\3\2\2\2\u01f9\u01fb")
        buf.write("\7\7\2\2\u01fa\u01fc\5\u0098M\2\u01fb\u01fa\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\65\3\2\2\2\u01fd\u01fe\5\u00aaV\2")
        buf.write("\u01fe\67\3\2\2\2\u01ff\u0205\7\b\2\2\u0200\u0203\5d\63")
        buf.write("\2\u0201\u0202\7\t\2\2\u0202\u0204\5d\63\2\u0203\u0201")
        buf.write("\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0206\3\2\2\2\u0205")
        buf.write("\u0200\3\2\2\2\u0205\u0206\3\2\2\2\u02069\3\2\2\2\u0207")
        buf.write("\u020a\5<\37\2\u0208\u020a\5> \2\u0209\u0207\3\2\2\2\u0209")
        buf.write("\u0208\3\2\2\2\u020a;\3\2\2\2\u020b\u020c\7\n\2\2\u020c")
        buf.write("\u020d\5F$\2\u020d=\3\2\2\2\u020e\u021b\7\t\2\2\u020f")
        buf.write("\u0211\t\3\2\2\u0210\u020f\3\2\2\2\u0211\u0214\3\2\2\2")
        buf.write("\u0212\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215\3")
        buf.write("\2\2\2\u0214\u0212\3\2\2\2\u0215\u021c\5H%\2\u0216\u0218")
        buf.write("\t\3\2\2\u0217\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219")
        buf.write("\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\3\2\2\2")
        buf.write("\u021b\u0212\3\2\2\2\u021b\u0217\3\2\2\2\u021c\u021d\3")
        buf.write("\2\2\2\u021d\u0224\7\n\2\2\u021e\u0225\7\65\2\2\u021f")
        buf.write("\u0220\5\u00aeX\2\u0220\u0221\5D#\2\u0221\u0222\5\u00b0")
        buf.write("Y\2\u0222\u0225\3\2\2\2\u0223\u0225\5D#\2\u0224\u021e")
        buf.write("\3\2\2\2\u0224\u021f\3\2\2\2\u0224\u0223\3\2\2\2\u0225")
        buf.write("?\3\2\2\2\u0226\u0229\7*\2\2\u0227\u0228\7\13\2\2\u0228")
        buf.write("\u022a\7*\2\2\u0229\u0227\3\2\2\2\u0229\u022a\3\2\2\2")
        buf.write("\u022aA\3\2\2\2\u022b\u022e\5H%\2\u022c\u022d\7\13\2\2")
        buf.write("\u022d\u022f\7*\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3")
        buf.write("\2\2\2\u022fC\3\2\2\2\u0230\u0235\5@!\2\u0231\u0232\7")
        buf.write("8\2\2\u0232\u0234\5@!\2\u0233\u0231\3\2\2\2\u0234\u0237")
        buf.write("\3\2\2\2\u0235\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0238\u023a\78\2\2")
        buf.write("\u0239\u0238\3\2\2\2\u0239\u023a\3\2\2\2\u023aE\3\2\2")
        buf.write("\2\u023b\u0240\5B\"\2\u023c\u023d\78\2\2\u023d\u023f\5")
        buf.write("B\"\2\u023e\u023c\3\2\2\2\u023f\u0242\3\2\2\2\u0240\u023e")
        buf.write("\3\2\2\2\u0240\u0241\3\2\2\2\u0241G\3\2\2\2\u0242\u0240")
        buf.write("\3\2\2\2\u0243\u0248\7*\2\2\u0244\u0245\7\63\2\2\u0245")
        buf.write("\u0247\7*\2\2\u0246\u0244\3\2\2\2\u0247\u024a\3\2\2\2")
        buf.write("\u0248\u0246\3\2\2\2\u0248\u0249\3\2\2\2\u0249I\3\2\2")
        buf.write("\2\u024a\u0248\3\2\2\2\u024b\u024c\7\f\2\2\u024c\u0251")
        buf.write("\7*\2\2\u024d\u024e\78\2\2\u024e\u0250\7*\2\2\u024f\u024d")
        buf.write("\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251")
        buf.write("\u0252\3\2\2\2\u0252K\3\2\2\2\u0253\u0251\3\2\2\2\u0254")
        buf.write("\u0255\7\r\2\2\u0255\u025a\7*\2\2\u0256\u0257\78\2\2\u0257")
        buf.write("\u0259\7*\2\2\u0258\u0256\3\2\2\2\u0259\u025c\3\2\2\2")
        buf.write("\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025bM\3\2\2")
        buf.write("\2\u025c\u025a\3\2\2\2\u025d\u025e\7\16\2\2\u025e\u0261")
        buf.write("\5d\63\2\u025f\u0260\78\2\2\u0260\u0262\5d\63\2\u0261")
        buf.write("\u025f\3\2\2\2\u0261\u0262\3\2\2\2\u0262O\3\2\2\2\u0263")
        buf.write("\u026d\5T+\2\u0264\u026d\5V,\2\u0265\u026d\5X-\2\u0266")
        buf.write("\u026d\5Z.\2\u0267\u026d\5\\/\2\u0268\u026d\5\20\t\2\u0269")
        buf.write("\u026d\5\u009cO\2\u026a\u026d\5\f\7\2\u026b\u026d\5R*")
        buf.write("\2\u026c\u0263\3\2\2\2\u026c\u0264\3\2\2\2\u026c\u0265")
        buf.write("\3\2\2\2\u026c\u0266\3\2\2\2\u026c\u0267\3\2\2\2\u026c")
        buf.write("\u0268\3\2\2\2\u026c\u0269\3\2\2\2\u026c\u026a\3\2\2\2")
        buf.write("\u026c\u026b\3\2\2\2\u026dQ\3\2\2\2\u026e\u0272\7\'\2")
        buf.write("\2\u026f\u0273\5\20\t\2\u0270\u0273\5\\/\2\u0271\u0273")
        buf.write("\5X-\2\u0272\u026f\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0271")
        buf.write("\3\2\2\2\u0273S\3\2\2\2\u0274\u0275\7\17\2\2\u0275\u0276")
        buf.write("\5d\63\2\u0276\u0277\79\2\2\u0277\u027f\5b\62\2\u0278")
        buf.write("\u0279\7\20\2\2\u0279\u027a\5d\63\2\u027a\u027b\79\2\2")
        buf.write("\u027b\u027c\5b\62\2\u027c\u027e\3\2\2\2\u027d\u0278\3")
        buf.write("\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2\u027f\u0280")
        buf.write("\3\2\2\2\u0280\u0285\3\2\2\2\u0281\u027f\3\2\2\2\u0282")
        buf.write("\u0283\7\21\2\2\u0283\u0284\79\2\2\u0284\u0286\5b\62\2")
        buf.write("\u0285\u0282\3\2\2\2\u0285\u0286\3\2\2\2\u0286U\3\2\2")
        buf.write("\2\u0287\u0288\7\22\2\2\u0288\u0289\5d\63\2\u0289\u028a")
        buf.write("\79\2\2\u028a\u028e\5b\62\2\u028b\u028c\7\21\2\2\u028c")
        buf.write("\u028d\79\2\2\u028d\u028f\5b\62\2\u028e\u028b\3\2\2\2")
        buf.write("\u028e\u028f\3\2\2\2\u028fW\3\2\2\2\u0290\u0291\7\23\2")
        buf.write("\2\u0291\u0292\5\u0096L\2\u0292\u0293\7\24\2\2\u0293\u0294")
        buf.write("\5\u0098M\2\u0294\u0295\79\2\2\u0295\u0299\5b\62\2\u0296")
        buf.write("\u0297\7\21\2\2\u0297\u0298\79\2\2\u0298\u029a\5b\62\2")
        buf.write("\u0299\u0296\3\2\2\2\u0299\u029a\3\2\2\2\u029aY\3\2\2")
        buf.write("\2\u029b\u029c\7\25\2\2\u029c\u029d\79\2\2\u029d\u02b3")
        buf.write("\5b\62\2\u029e\u029f\5`\61\2\u029f\u02a0\79\2\2\u02a0")
        buf.write("\u02a1\5b\62\2\u02a1\u02a3\3\2\2\2\u02a2\u029e\3\2\2\2")
        buf.write("\u02a3\u02a4\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3")
        buf.write("\2\2\2\u02a5\u02a9\3\2\2\2\u02a6\u02a7\7\21\2\2\u02a7")
        buf.write("\u02a8\79\2\2\u02a8\u02aa\5b\62\2\u02a9\u02a6\3\2\2\2")
        buf.write("\u02a9\u02aa\3\2\2\2\u02aa\u02ae\3\2\2\2\u02ab\u02ac\7")
        buf.write("\26\2\2\u02ac\u02ad\79\2\2\u02ad\u02af\5b\62\2\u02ae\u02ab")
        buf.write("\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b4\3\2\2\2\u02b0")
        buf.write("\u02b1\7\26\2\2\u02b1\u02b2\79\2\2\u02b2\u02b4\5b\62\2")
        buf.write("\u02b3\u02a2\3\2\2\2\u02b3\u02b0\3\2\2\2\u02b4[\3\2\2")
        buf.write("\2\u02b5\u02b6\7\27\2\2\u02b6\u02bb\5^\60\2\u02b7\u02b8")
        buf.write("\78\2\2\u02b8\u02ba\5^\60\2\u02b9\u02b7\3\2\2\2\u02ba")
        buf.write("\u02bd\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2")
        buf.write("\u02bc\u02be\3\2\2\2\u02bd\u02bb\3\2\2\2\u02be\u02bf\7")
        buf.write("9\2\2\u02bf\u02c0\5b\62\2\u02c0]\3\2\2\2\u02c1\u02c4\5")
        buf.write("d\63\2\u02c2\u02c3\7\13\2\2\u02c3\u02c5\5x=\2\u02c4\u02c2")
        buf.write("\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5_\3\2\2\2\u02c6\u02cc")
        buf.write("\7\30\2\2\u02c7\u02ca\5d\63\2\u02c8\u02c9\7\13\2\2\u02c9")
        buf.write("\u02cb\7*\2\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2")
        buf.write("\u02cb\u02cd\3\2\2\2\u02cc\u02c7\3\2\2\2\u02cc\u02cd\3")
        buf.write("\2\2\2\u02cda\3\2\2\2\u02ce\u02d9\5\36\20\2\u02cf\u02d0")
        buf.write("\7)\2\2\u02d0\u02d2\7d\2\2\u02d1\u02d3\5\34\17\2\u02d2")
        buf.write("\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d2\3\2\2\2")
        buf.write("\u02d4\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d7\7")
        buf.write("e\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02ce\3\2\2\2\u02d8\u02cf")
        buf.write("\3\2\2\2\u02d9c\3\2\2\2\u02da\u02e0\5l\67\2\u02db\u02dc")
        buf.write("\7\17\2\2\u02dc\u02dd\5l\67\2\u02dd\u02de\7\21\2\2\u02de")
        buf.write("\u02df\5d\63\2\u02df\u02e1\3\2\2\2\u02e0\u02db\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02e4\3\2\2\2\u02e2\u02e4\5")
        buf.write("h\65\2\u02e3\u02da\3\2\2\2\u02e3\u02e2\3\2\2\2\u02e4e")
        buf.write("\3\2\2\2\u02e5\u02e8\5l\67\2\u02e6\u02e8\5j\66\2\u02e7")
        buf.write("\u02e5\3\2\2\2\u02e7\u02e6\3\2\2\2\u02e8g\3\2\2\2\u02e9")
        buf.write("\u02eb\7\31\2\2\u02ea\u02ec\5\30\r\2\u02eb\u02ea\3\2\2")
        buf.write("\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee")
        buf.write("\79\2\2\u02ee\u02ef\5d\63\2\u02efi\3\2\2\2\u02f0\u02f2")
        buf.write("\7\31\2\2\u02f1\u02f3\5\30\r\2\u02f2\u02f1\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5\79\2\2")
        buf.write("\u02f5\u02f6\5f\64\2\u02f6k\3\2\2\2\u02f7\u02fc\5n8\2")
        buf.write("\u02f8\u02f9\7\32\2\2\u02f9\u02fb\5n8\2\u02fa\u02f8\3")
        buf.write("\2\2\2\u02fb\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd")
        buf.write("\3\2\2\2\u02fdm\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0304")
        buf.write("\5p9\2\u0300\u0301\7\33\2\2\u0301\u0303\5p9\2\u0302\u0300")
        buf.write("\3\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302\3\2\2\2\u0304")
        buf.write("\u0305\3\2\2\2\u0305o\3\2\2\2\u0306\u0304\3\2\2\2\u0307")
        buf.write("\u0308\7\34\2\2\u0308\u030b\5p9\2\u0309\u030b\5r:\2\u030a")
        buf.write("\u0307\3\2\2\2\u030a\u0309\3\2\2\2\u030bq\3\2\2\2\u030c")
        buf.write("\u0312\5x=\2\u030d\u030e\5t;\2\u030e\u030f\5x=\2\u030f")
        buf.write("\u0311\3\2\2\2\u0310\u030d\3\2\2\2\u0311\u0314\3\2\2\2")
        buf.write("\u0312\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313s\3\2\2")
        buf.write("\2\u0314\u0312\3\2\2\2\u0315\u0323\7L\2\2\u0316\u0323")
        buf.write("\7M\2\2\u0317\u0323\7N\2\2\u0318\u0323\7O\2\2\u0319\u0323")
        buf.write("\7P\2\2\u031a\u0323\7Q\2\2\u031b\u0323\7R\2\2\u031c\u0323")
        buf.write("\7\24\2\2\u031d\u031e\7\34\2\2\u031e\u0323\7\24\2\2\u031f")
        buf.write("\u0323\7\35\2\2\u0320\u0321\7\35\2\2\u0321\u0323\7\34")
        buf.write("\2\2\u0322\u0315\3\2\2\2\u0322\u0316\3\2\2\2\u0322\u0317")
        buf.write("\3\2\2\2\u0322\u0318\3\2\2\2\u0322\u0319\3\2\2\2\u0322")
        buf.write("\u031a\3\2\2\2\u0322\u031b\3\2\2\2\u0322\u031c\3\2\2\2")
        buf.write("\u0322\u031d\3\2\2\2\u0322\u031f\3\2\2\2\u0322\u0320\3")
        buf.write("\2\2\2\u0323u\3\2\2\2\u0324\u0325\7\65\2\2\u0325\u0326")
        buf.write("\5x=\2\u0326w\3\2\2\2\u0327\u032c\5z>\2\u0328\u0329\7")
        buf.write("?\2\2\u0329\u032b\5z>\2\u032a\u0328\3\2\2\2\u032b\u032e")
        buf.write("\3\2\2\2\u032c\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d")
        buf.write("y\3\2\2\2\u032e\u032c\3\2\2\2\u032f\u0334\5|?\2\u0330")
        buf.write("\u0331\7@\2\2\u0331\u0333\5|?\2\u0332\u0330\3\2\2\2\u0333")
        buf.write("\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0335\3\2\2\2")
        buf.write("\u0335{\3\2\2\2\u0336\u0334\3\2\2\2\u0337\u033c\5~@\2")
        buf.write("\u0338\u0339\7A\2\2\u0339\u033b\5~@\2\u033a\u0338\3\2")
        buf.write("\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d")
        buf.write("\3\2\2\2\u033d}\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0344")
        buf.write("\5\u0080A\2\u0340\u0341\t\4\2\2\u0341\u0343\5\u0080A\2")
        buf.write("\u0342\u0340\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342\3")
        buf.write("\2\2\2\u0344\u0345\3\2\2\2\u0345\177\3\2\2\2\u0346\u0344")
        buf.write("\3\2\2\2\u0347\u034c\5\u0082B\2\u0348\u0349\t\5\2\2\u0349")
        buf.write("\u034b\5\u0082B\2\u034a\u0348\3\2\2\2\u034b\u034e\3\2")
        buf.write("\2\2\u034c\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u0081")
        buf.write("\3\2\2\2\u034e\u034c\3\2\2\2\u034f\u0354\5\u0084C\2\u0350")
        buf.write("\u0351\t\6\2\2\u0351\u0353\5\u0084C\2\u0352\u0350\3\2")
        buf.write("\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0083\3\2\2\2\u0356\u0354\3\2\2\2\u0357")
        buf.write("\u0358\t\7\2\2\u0358\u035b\5\u0084C\2\u0359\u035b\5\u0086")
        buf.write("D\2\u035a\u0357\3\2\2\2\u035a\u0359\3\2\2\2\u035b\u0085")
        buf.write("\3\2\2\2\u035c\u035f\5\u0088E\2\u035d\u035e\7;\2\2\u035e")
        buf.write("\u0360\5\u0084C\2\u035f\u035d\3\2\2\2\u035f\u0360\3\2")
        buf.write("\2\2\u0360\u0087\3\2\2\2\u0361\u0363\7(\2\2\u0362\u0361")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364\3\2\2\2\u0364")
        buf.write("\u0368\5\u008aF\2\u0365\u0367\5\u008eH\2\u0366\u0365\3")
        buf.write("\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369")
        buf.write("\3\2\2\2\u0369\u0089\3\2\2\2\u036a\u0368\3\2\2\2\u036b")
        buf.write("\u036e\5\u00aeX\2\u036c\u036f\5\u00aaV\2\u036d\u036f\5")
        buf.write("\u008cG\2\u036e\u036c\3\2\2\2\u036e\u036d\3\2\2\2\u036e")
        buf.write("\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371\5\u00b0")
        buf.write("Y\2\u0371\u0388\3\2\2\2\u0372\u0374\7=\2\2\u0373\u0375")
        buf.write("\5\u008cG\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0388\7>\2\2\u0377\u0379\7J\2\2\u0378")
        buf.write("\u037a\5\u009aN\2\u0379\u0378\3\2\2\2\u0379\u037a\3\2")
        buf.write("\2\2\u037a\u037b\3\2\2\2\u037b\u0388\7K\2\2\u037c\u0388")
        buf.write("\7*\2\2\u037d\u0388\7\4\2\2\u037e\u0380\7\3\2\2\u037f")
        buf.write("\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u037f\3\2\2\2")
        buf.write("\u0381\u0382\3\2\2\2\u0382\u0388\3\2\2\2\u0383\u0388\7")
        buf.write("\64\2\2\u0384\u0388\7\36\2\2\u0385\u0388\7\37\2\2\u0386")
        buf.write("\u0388\7 \2\2\u0387\u036b\3\2\2\2\u0387\u0372\3\2\2\2")
        buf.write("\u0387\u0377\3\2\2\2\u0387\u037c\3\2\2\2\u0387\u037d\3")
        buf.write("\2\2\2\u0387\u037f\3\2\2\2\u0387\u0383\3\2\2\2\u0387\u0384")
        buf.write("\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0386\3\2\2\2\u0388")
        buf.write("\u008b\3\2\2\2\u0389\u038c\5d\63\2\u038a\u038c\5v<\2\u038b")
        buf.write("\u0389\3\2\2\2\u038b\u038a\3\2\2\2\u038c\u039b\3\2\2\2")
        buf.write("\u038d\u039c\5\u00a4S\2\u038e\u0391\78\2\2\u038f\u0392")
        buf.write("\5d\63\2\u0390\u0392\5v<\2\u0391\u038f\3\2\2\2\u0391\u0390")
        buf.write("\3\2\2\2\u0392\u0394\3\2\2\2\u0393\u038e\3\2\2\2\u0394")
        buf.write("\u0397\3\2\2\2\u0395\u0393\3\2\2\2\u0395\u0396\3\2\2\2")
        buf.write("\u0396\u0399\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u039a\7")
        buf.write("8\2\2\u0399\u0398\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039c")
        buf.write("\3\2\2\2\u039b\u038d\3\2\2\2\u039b\u0395\3\2\2\2\u039c")
        buf.write("\u008d\3\2\2\2\u039d\u039f\5\u00aeX\2\u039e\u03a0\5\u009e")
        buf.write("P\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u03a2\5\u00b0Y\2\u03a2\u03aa\3\2\2\2\u03a3")
        buf.write("\u03a4\7=\2\2\u03a4\u03a5\5\u0090I\2\u03a5\u03a6\7>\2")
        buf.write("\2\u03a6\u03aa\3\2\2\2\u03a7\u03a8\7\63\2\2\u03a8\u03aa")
        buf.write("\7*\2\2\u03a9\u039d\3\2\2\2\u03a9\u03a3\3\2\2\2\u03a9")
        buf.write("\u03a7\3\2\2\2\u03aa\u008f\3\2\2\2\u03ab\u03b0\5\u0092")
        buf.write("J\2\u03ac\u03ad\78\2\2\u03ad\u03af\5\u0092J\2\u03ae\u03ac")
        buf.write("\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b0")
        buf.write("\u03b1\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2")
        buf.write("\u03b3\u03b5\78\2\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3")
        buf.write("\2\2\2\u03b5\u0091\3\2\2\2\u03b6\u03c2\5d\63\2\u03b7\u03b9")
        buf.write("\5d\63\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\3\2\2\2\u03ba\u03bc\79\2\2\u03bb\u03bd\5d\63\2")
        buf.write("\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bf\3")
        buf.write("\2\2\2\u03be\u03c0\5\u0094K\2\u03bf\u03be\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03c2\3\2\2\2\u03c1\u03b6\3\2\2\2")
        buf.write("\u03c1\u03b8\3\2\2\2\u03c2\u0093\3\2\2\2\u03c3\u03c5\7")
        buf.write("9\2\2\u03c4\u03c6\5d\63\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6")
        buf.write("\3\2\2\2\u03c6\u0095\3\2\2\2\u03c7\u03ca\5x=\2\u03c8\u03ca")
        buf.write("\5v<\2\u03c9\u03c7\3\2\2\2\u03c9\u03c8\3\2\2\2\u03ca\u03d2")
        buf.write("\3\2\2\2\u03cb\u03ce\78\2\2\u03cc\u03cf\5x=\2\u03cd\u03cf")
        buf.write("\5v<\2\u03ce\u03cc\3\2\2\2\u03ce\u03cd\3\2\2\2\u03cf\u03d1")
        buf.write("\3\2\2\2\u03d0\u03cb\3\2\2\2\u03d1\u03d4\3\2\2\2\u03d2")
        buf.write("\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d6\3\2\2\2")
        buf.write("\u03d4\u03d2\3\2\2\2\u03d5\u03d7\78\2\2\u03d6\u03d5\3")
        buf.write("\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u0097\3\2\2\2\u03d8\u03dd")
        buf.write("\5d\63\2\u03d9\u03da\78\2\2\u03da\u03dc\5d\63\2\u03db")
        buf.write("\u03d9\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2")
        buf.write("\u03dd\u03de\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3")
        buf.write("\2\2\2\u03e0\u03e2\78\2\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u0099\3\2\2\2\u03e3\u03e4\5d\63\2\u03e4")
        buf.write("\u03e5\79\2\2\u03e5\u03e6\5d\63\2\u03e6\u03ea\3\2\2\2")
        buf.write("\u03e7\u03e8\7;\2\2\u03e8\u03ea\5x=\2\u03e9\u03e3\3\2")
        buf.write("\2\2\u03e9\u03e7\3\2\2\2\u03ea\u03fd\3\2\2\2\u03eb\u03fe")
        buf.write("\5\u00a4S\2\u03ec\u03f3\78\2\2\u03ed\u03ee\5d\63\2\u03ee")
        buf.write("\u03ef\79\2\2\u03ef\u03f0\5d\63\2\u03f0\u03f4\3\2\2\2")
        buf.write("\u03f1\u03f2\7;\2\2\u03f2\u03f4\5x=\2\u03f3\u03ed\3\2")
        buf.write("\2\2\u03f3\u03f1\3\2\2\2\u03f4\u03f6\3\2\2\2\u03f5\u03ec")
        buf.write("\3\2\2\2\u03f6\u03f9\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u03fb\3\2\2\2\u03f9\u03f7\3\2\2\2")
        buf.write("\u03fa\u03fc\78\2\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3")
        buf.write("\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03eb\3\2\2\2\u03fd\u03f7")
        buf.write("\3\2\2\2\u03fe\u0414\3\2\2\2\u03ff\u0402\5d\63\2\u0400")
        buf.write("\u0402\5v<\2\u0401\u03ff\3\2\2\2\u0401\u0400\3\2\2\2\u0402")
        buf.write("\u0411\3\2\2\2\u0403\u0412\5\u00a4S\2\u0404\u0407\78\2")
        buf.write("\2\u0405\u0408\5d\63\2\u0406\u0408\5v<\2\u0407\u0405\3")
        buf.write("\2\2\2\u0407\u0406\3\2\2\2\u0408\u040a\3\2\2\2\u0409\u0404")
        buf.write("\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409\3\2\2\2\u040b")
        buf.write("\u040c\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2")
        buf.write("\u040e\u0410\78\2\2\u040f\u040e\3\2\2\2\u040f\u0410\3")
        buf.write("\2\2\2\u0410\u0412\3\2\2\2\u0411\u0403\3\2\2\2\u0411\u040b")
        buf.write("\3\2\2\2\u0412\u0414\3\2\2\2\u0413\u03e9\3\2\2\2\u0413")
        buf.write("\u0401\3\2\2\2\u0414\u009b\3\2\2\2\u0415\u0416\7!\2\2")
        buf.write("\u0416\u041d\7*\2\2\u0417\u0419\5\u00aeX\2\u0418\u041a")
        buf.write("\5\u009eP\2\u0419\u0418\3\2\2\2\u0419\u041a\3\2\2\2\u041a")
        buf.write("\u041b\3\2\2\2\u041b\u041c\5\u00b0Y\2\u041c\u041e\3\2")
        buf.write("\2\2\u041d\u0417\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f")
        buf.write("\3\2\2\2\u041f\u0420\79\2\2\u0420\u0421\5b\62\2\u0421")
        buf.write("\u009d\3\2\2\2\u0422\u0427\5\u00a0Q\2\u0423\u0424\78\2")
        buf.write("\2\u0424\u0426\5\u00a0Q\2\u0425\u0423\3\2\2\2\u0426\u0429")
        buf.write("\3\2\2\2\u0427\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428")
        buf.write("\u042b\3\2\2\2\u0429\u0427\3\2\2\2\u042a\u042c\78\2\2")
        buf.write("\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u009f\3")
        buf.write("\2\2\2\u042d\u042f\5d\63\2\u042e\u0430\5\u00a4S\2\u042f")
        buf.write("\u042e\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u043a\3\2\2\2")
        buf.write("\u0431\u0432\5d\63\2\u0432\u0433\7<\2\2\u0433\u0434\5")
        buf.write("d\63\2\u0434\u043a\3\2\2\2\u0435\u0436\7;\2\2\u0436\u043a")
        buf.write("\5d\63\2\u0437\u0438\7\65\2\2\u0438\u043a\5d\63\2\u0439")
        buf.write("\u042d\3\2\2\2\u0439\u0431\3\2\2\2\u0439\u0435\3\2\2\2")
        buf.write("\u0439\u0437\3\2\2\2\u043a\u00a1\3\2\2\2\u043b\u043e\5")
        buf.write("\u00a4S\2\u043c\u043e\5\u00a6T\2\u043d\u043b\3\2\2\2\u043d")
        buf.write("\u043c\3\2\2\2\u043e\u00a3\3\2\2\2\u043f\u0441\7\'\2\2")
        buf.write("\u0440\u043f\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442\3")
        buf.write("\2\2\2\u0442\u0443\7\23\2\2\u0443\u0444\5\u0096L\2\u0444")
        buf.write("\u0445\7\24\2\2\u0445\u0447\5l\67\2\u0446\u0448\5\u00a2")
        buf.write("R\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u00a5")
        buf.write("\3\2\2\2\u0449\u044a\7\17\2\2\u044a\u044c\5f\64\2\u044b")
        buf.write("\u044d\5\u00a2R\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2")
        buf.write("\2\2\u044d\u00a7\3\2\2\2\u044e\u044f\7*\2\2\u044f\u00a9")
        buf.write("\3\2\2\2\u0450\u0452\7\"\2\2\u0451\u0453\5\u00acW\2\u0452")
        buf.write("\u0451\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u00ab\3\2\2\2")
        buf.write("\u0454\u0455\7\t\2\2\u0455\u0458\5d\63\2\u0456\u0458\5")
        buf.write("\u0098M\2\u0457\u0454\3\2\2\2\u0457\u0456\3\2\2\2\u0458")
        buf.write("\u00ad\3\2\2\2\u0459\u045a\7\66\2\2\u045a\u00af\3\2\2")
        buf.write("\2\u045b\u045c\7\67\2\2\u045c\u00b1\3\2\2\2\u00a8\u00b7")
        buf.write("\u00bb\u00bd\u00c6\u00cf\u00d3\u00da\u00e0\u00ea\u00f1")
        buf.write("\u00f8\u00fe\u0102\u0108\u010e\u0112\u0119\u011b\u011d")
        buf.write("\u0122\u0124\u0126\u012a\u0130\u0134\u013b\u013d\u013f")
        buf.write("\u0144\u0146\u014b\u0150\u0156\u015a\u0160\u0166\u016a")
        buf.write("\u0171\u0173\u0175\u017a\u017c\u017e\u0182\u0188\u018c")
        buf.write("\u0193\u0195\u0197\u019c\u019e\u01a4\u01ab\u01af\u01bb")
        buf.write("\u01c2\u01c7\u01cb\u01ce\u01d4\u01d8\u01dd\u01e1\u01e5")
        buf.write("\u01f3\u01fb\u0203\u0205\u0209\u0212\u0219\u021b\u0224")
        buf.write("\u0229\u022e\u0235\u0239\u0240\u0248\u0251\u025a\u0261")
        buf.write("\u026c\u0272\u027f\u0285\u028e\u0299\u02a4\u02a9\u02ae")
        buf.write("\u02b3\u02bb\u02c4\u02ca\u02cc\u02d4\u02d8\u02e0\u02e3")
        buf.write("\u02e7\u02eb\u02f2\u02fc\u0304\u030a\u0312\u0322\u032c")
        buf.write("\u0334\u033c\u0344\u034c\u0354\u035a\u035f\u0362\u0368")
        buf.write("\u036e\u0374\u0379\u0381\u0387\u038b\u0391\u0395\u0399")
        buf.write("\u039b\u039f\u03a9\u03b0\u03b4\u03b8\u03bc\u03bf\u03c1")
        buf.write("\u03c5\u03c9\u03ce\u03d2\u03d6\u03dd\u03e1\u03e9\u03f3")
        buf.write("\u03f7\u03fb\u03fd\u0401\u0407\u040b\u040f\u0411\u0413")
        buf.write("\u0419\u041d\u0427\u042b\u042f\u0439\u043d\u0440\u0447")
        buf.write("\u044c\u0452\u0457")
        return buf.getvalue()


class Python3Parser ( Parser ):

    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'finally'", "'with'", "'except'", "'lambda'", "'or'", 
                     "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", 
                     "'class'", "'yield'", "'del'", "'pass'", "'continue'", 
                     "'break'", "'async'", "'await'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", 
                     "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "STRING", "NUMBER", "INTEGER", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", 
                      "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", 
                      "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", 
                      "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", 
                      "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_typedargslist = 9
    RULE_tfpdef = 10
    RULE_varargslist = 11
    RULE_vfpdef = 12
    RULE_stmt = 13
    RULE_simple_stmt = 14
    RULE_small_stmt = 15
    RULE_expr_stmt = 16
    RULE_annassign = 17
    RULE_testlist_star_expr = 18
    RULE_augassign = 19
    RULE_del_stmt = 20
    RULE_pass_stmt = 21
    RULE_flow_stmt = 22
    RULE_break_stmt = 23
    RULE_continue_stmt = 24
    RULE_return_stmt = 25
    RULE_yield_stmt = 26
    RULE_raise_stmt = 27
    RULE_import_stmt = 28
    RULE_import_name = 29
    RULE_import_from = 30
    RULE_import_as_name = 31
    RULE_dotted_as_name = 32
    RULE_import_as_names = 33
    RULE_dotted_as_names = 34
    RULE_dotted_name = 35
    RULE_global_stmt = 36
    RULE_nonlocal_stmt = 37
    RULE_assert_stmt = 38
    RULE_compound_stmt = 39
    RULE_async_stmt = 40
    RULE_if_stmt = 41
    RULE_while_stmt = 42
    RULE_for_stmt = 43
    RULE_try_stmt = 44
    RULE_with_stmt = 45
    RULE_with_item = 46
    RULE_except_clause = 47
    RULE_suite = 48
    RULE_test = 49
    RULE_test_nocond = 50
    RULE_lambdef = 51
    RULE_lambdef_nocond = 52
    RULE_or_test = 53
    RULE_and_test = 54
    RULE_not_test = 55
    RULE_comparison = 56
    RULE_comp_op = 57
    RULE_star_expr = 58
    RULE_expr = 59
    RULE_xor_expr = 60
    RULE_and_expr = 61
    RULE_shift_expr = 62
    RULE_arith_expr = 63
    RULE_term = 64
    RULE_factor = 65
    RULE_power = 66
    RULE_atom_expr = 67
    RULE_atom = 68
    RULE_testlist_comp = 69
    RULE_trailer = 70
    RULE_subscriptlist = 71
    RULE_subscript = 72
    RULE_sliceop = 73
    RULE_exprlist = 74
    RULE_testlist = 75
    RULE_dictorsetmaker = 76
    RULE_classdef = 77
    RULE_arglist = 78
    RULE_argument = 79
    RULE_comp_iter = 80
    RULE_comp_for = 81
    RULE_comp_if = 82
    RULE_encoding_decl = 83
    RULE_yield_expr = 84
    RULE_yield_arg = 85
    RULE_open_paren = 86
    RULE_close_paren = 87

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "and_test", "not_test", "comparison", "comp_op", "star_expr", 
                   "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                   "term", "factor", "power", "atom_expr", "atom", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg", "open_paren", "close_paren" ]

    EOF = Token.EOF
    STRING=1
    NUMBER=2
    INTEGER=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    AS=9
    GLOBAL=10
    NONLOCAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    FINALLY=20
    WITH=21
    EXCEPT=22
    LAMBDA=23
    OR=24
    AND=25
    NOT=26
    IS=27
    NONE=28
    TRUE=29
    FALSE=30
    CLASS=31
    YIELD=32
    DEL=33
    PASS=34
    CONTINUE=35
    BREAK=36
    ASYNC=37
    AWAIT=38
    NEWLINE=39
    NAME=40
    STRING_LITERAL=41
    BYTES_LITERAL=42
    DECIMAL_INTEGER=43
    OCT_INTEGER=44
    HEX_INTEGER=45
    BIN_INTEGER=46
    FLOAT_NUMBER=47
    IMAG_NUMBER=48
    DOT=49
    ELLIPSIS=50
    STAR=51
    OPEN_PAREN=52
    CLOSE_PAREN=53
    COMMA=54
    COLON=55
    SEMI_COLON=56
    POWER=57
    ASSIGN=58
    OPEN_BRACK=59
    CLOSE_BRACK=60
    OR_OP=61
    XOR=62
    AND_OP=63
    LEFT_SHIFT=64
    RIGHT_SHIFT=65
    ADD=66
    MINUS=67
    DIV=68
    MOD=69
    IDIV=70
    NOT_OP=71
    OPEN_BRACE=72
    CLOSE_BRACE=73
    LESS_THAN=74
    GREATER_THAN=75
    EQUALS=76
    GT_EQ=77
    LT_EQ=78
    NOT_EQ_1=79
    NOT_EQ_2=80
    AT=81
    ARROW=82
    ADD_ASSIGN=83
    SUB_ASSIGN=84
    MULT_ASSIGN=85
    AT_ASSIGN=86
    DIV_ASSIGN=87
    MOD_ASSIGN=88
    AND_ASSIGN=89
    OR_ASSIGN=90
    XOR_ASSIGN=91
    LEFT_SHIFT_ASSIGN=92
    RIGHT_SHIFT_ASSIGN=93
    POWER_ASSIGN=94
    IDIV_ASSIGN=95
    SKIP_=96
    UNKNOWN_CHAR=97
    INDENT=98
    DEDENT=99

    def __init__(self, input:TokenStream, output = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self.match(Python3Parser.NEWLINE)
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self.simple_stmt()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.CLASS, Python3Parser.ASYNC, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 178
                self.compound_stmt()
                self.state = 179
                self.match(Python3Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (1 << (Python3Parser.AT - 66)))) != 0):
                self.state = 185
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 183
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.ASYNC, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT]:
                    self.state = 184
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 190
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.testlist()
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 193
                self.match(Python3Parser.NEWLINE)
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 199
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def open_paren(self):
            return self.getTypedRuleContext(Python3Parser.Open_parenContext,0)


        def close_paren(self):
            return self.getTypedRuleContext(Python3Parser.Close_parenContext,0)


        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(Python3Parser.AT)
            self.state = 202
            self.dotted_name()
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 203
                self.open_paren()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 204
                    self.arglist()


                self.state = 207
                self.close_paren()


            self.state = 211
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 213
                self.decorator()
                self.state = 216 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.decorators()
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 219
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 220
                self.funcdef()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.state = 221
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(Python3Parser.ASYNC)
            self.state = 225
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(Python3Parser.DEF)
            self.state = 228
            self.match(Python3Parser.NAME)
            self.state = 229
            self.parameters()
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 230
                self.match(Python3Parser.ARROW)
                self.state = 231
                self.test()


            self.state = 234
            self.match(Python3Parser.COLON)
            self.state = 235
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_paren(self):
            return self.getTypedRuleContext(Python3Parser.Open_parenContext,0)


        def close_paren(self):
            return self.getTypedRuleContext(Python3Parser.Close_parenContext,0)


        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.open_paren()
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 238
                self.typedargslist()


            self.state = 241
            self.close_paren()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.state = 243
                self.tfpdef()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 244
                    self.match(Python3Parser.ASSIGN)
                    self.state = 245
                    self.test()


                self.state = 256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 248
                        self.match(Python3Parser.COMMA)
                        self.state = 249
                        self.tfpdef()
                        self.state = 252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 250
                            self.match(Python3Parser.ASSIGN)
                            self.state = 251
                            self.test()

                 
                    self.state = 258
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 259
                    self.match(Python3Parser.COMMA)
                    self.state = 290
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 260
                        self.match(Python3Parser.STAR)
                        self.state = 262
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.NAME:
                            self.state = 261
                            self.tfpdef()


                        self.state = 272
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 264
                                self.match(Python3Parser.COMMA)
                                self.state = 265
                                self.tfpdef()
                                self.state = 268
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 266
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 267
                                    self.test()

                         
                            self.state = 274
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 283
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 275
                            self.match(Python3Parser.COMMA)
                            self.state = 281
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 276
                                self.match(Python3Parser.POWER)
                                self.state = 277
                                self.tfpdef()
                                self.state = 279
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 278
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 285
                        self.match(Python3Parser.POWER)
                        self.state = 286
                        self.tfpdef()
                        self.state = 288
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 287
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 294
                self.match(Python3Parser.STAR)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.NAME:
                    self.state = 295
                    self.tfpdef()


                self.state = 306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 298
                        self.match(Python3Parser.COMMA)
                        self.state = 299
                        self.tfpdef()
                        self.state = 302
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 300
                            self.match(Python3Parser.ASSIGN)
                            self.state = 301
                            self.test()

                 
                    self.state = 308
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 309
                    self.match(Python3Parser.COMMA)
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 310
                        self.match(Python3Parser.POWER)
                        self.state = 311
                        self.tfpdef()
                        self.state = 313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 312
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 319
                self.match(Python3Parser.POWER)
                self.state = 320
                self.tfpdef()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 321
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(Python3Parser.NAME)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COLON:
                self.state = 327
                self.match(Python3Parser.COLON)
                self.state = 328
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.state = 331
                self.vfpdef()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 332
                    self.match(Python3Parser.ASSIGN)
                    self.state = 333
                    self.test()


                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 336
                        self.match(Python3Parser.COMMA)
                        self.state = 337
                        self.vfpdef()
                        self.state = 340
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 338
                            self.match(Python3Parser.ASSIGN)
                            self.state = 339
                            self.test()

                 
                    self.state = 346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 347
                    self.match(Python3Parser.COMMA)
                    self.state = 378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 348
                        self.match(Python3Parser.STAR)
                        self.state = 350
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.NAME:
                            self.state = 349
                            self.vfpdef()


                        self.state = 360
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 352
                                self.match(Python3Parser.COMMA)
                                self.state = 353
                                self.vfpdef()
                                self.state = 356
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 354
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 355
                                    self.test()

                         
                            self.state = 362
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                        self.state = 371
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 363
                            self.match(Python3Parser.COMMA)
                            self.state = 369
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 364
                                self.match(Python3Parser.POWER)
                                self.state = 365
                                self.vfpdef()
                                self.state = 367
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 366
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 373
                        self.match(Python3Parser.POWER)
                        self.state = 374
                        self.vfpdef()
                        self.state = 376
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 375
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 382
                self.match(Python3Parser.STAR)
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.NAME:
                    self.state = 383
                    self.vfpdef()


                self.state = 394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 386
                        self.match(Python3Parser.COMMA)
                        self.state = 387
                        self.vfpdef()
                        self.state = 390
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 388
                            self.match(Python3Parser.ASSIGN)
                            self.state = 389
                            self.test()

                 
                    self.state = 396
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 397
                    self.match(Python3Parser.COMMA)
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 398
                        self.match(Python3Parser.POWER)
                        self.state = 399
                        self.vfpdef()
                        self.state = 401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 400
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 407
                self.match(Python3Parser.POWER)
                self.state = 408
                self.vfpdef()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 409
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stmt)
        try:
            self.state = 418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.simple_stmt()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.CLASS, Python3Parser.ASYNC, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.small_stmt()
            self.state = 425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 421
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 422
                    self.small_stmt() 
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 428
                self.match(Python3Parser.SEMI_COLON)


            self.state = 431
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmall_stmt" ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_small_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 433
                self.expr_stmt()
                pass
            elif token in [Python3Parser.DEL]:
                self.state = 434
                self.del_stmt()
                pass
            elif token in [Python3Parser.PASS]:
                self.state = 435
                self.pass_stmt()
                pass
            elif token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.YIELD, Python3Parser.CONTINUE, Python3Parser.BREAK]:
                self.state = 436
                self.flow_stmt()
                pass
            elif token in [Python3Parser.FROM, Python3Parser.IMPORT]:
                self.state = 437
                self.import_stmt()
                pass
            elif token in [Python3Parser.GLOBAL]:
                self.state = 438
                self.global_stmt()
                pass
            elif token in [Python3Parser.NONLOCAL]:
                self.state = 439
                self.nonlocal_stmt()
                pass
            elif token in [Python3Parser.ASSERT]:
                self.state = 440
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.testlist_star_expr()
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.COLON]:
                self.state = 444
                self.annassign()
                pass
            elif token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                self.state = 445
                self.augassign()
                self.state = 448
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 446
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 447
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 450
                    self.match(Python3Parser.ASSIGN)
                    self.state = 453
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 451
                        self.yield_expr()
                        pass
                    elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 452
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(Python3Parser.COLON)
            self.state = 463
            self.test()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 464
                self.match(Python3Parser.ASSIGN)
                self.state = 465
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 468
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 469
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 472
                    self.match(Python3Parser.COMMA)
                    self.state = 475
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 473
                        self.test()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 474
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 482
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (Python3Parser.ADD_ASSIGN - 83)) | (1 << (Python3Parser.SUB_ASSIGN - 83)) | (1 << (Python3Parser.MULT_ASSIGN - 83)) | (1 << (Python3Parser.AT_ASSIGN - 83)) | (1 << (Python3Parser.DIV_ASSIGN - 83)) | (1 << (Python3Parser.MOD_ASSIGN - 83)) | (1 << (Python3Parser.AND_ASSIGN - 83)) | (1 << (Python3Parser.OR_ASSIGN - 83)) | (1 << (Python3Parser.XOR_ASSIGN - 83)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 83)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 83)) | (1 << (Python3Parser.POWER_ASSIGN - 83)) | (1 << (Python3Parser.IDIV_ASSIGN - 83)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(Python3Parser.DEL)
            self.state = 488
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_flow_stmt)
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 495
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 496
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(Python3Parser.RETURN)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                self.state = 504
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(Python3Parser.RAISE)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                self.state = 510
                self.test()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 511
                    self.match(Python3Parser.FROM)
                    self.state = 512
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_stmt)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(Python3Parser.IMPORT)
            self.state = 522
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def open_paren(self):
            return self.getTypedRuleContext(Python3Parser.Open_parenContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def close_paren(self):
            return self.getTypedRuleContext(Python3Parser.Close_parenContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(Python3Parser.FROM)
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 525
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 531
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 533 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 532
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 535 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 539
            self.match(Python3Parser.IMPORT)
            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 540
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 541
                self.open_paren()
                self.state = 542
                self.import_as_names()
                self.state = 543
                self.close_paren()
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 545
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(Python3Parser.NAME)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 549
                self.match(Python3Parser.AS)
                self.state = 550
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.dotted_name()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 554
                self.match(Python3Parser.AS)
                self.state = 555
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.import_as_name()
            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self.match(Python3Parser.COMMA)
                    self.state = 560
                    self.import_as_name() 
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 566
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.dotted_as_name()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 570
                self.match(Python3Parser.COMMA)
                self.state = 571
                self.dotted_as_name()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(Python3Parser.NAME)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 578
                self.match(Python3Parser.DOT)
                self.state = 579
                self.match(Python3Parser.NAME)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(Python3Parser.GLOBAL)
            self.state = 586
            self.match(Python3Parser.NAME)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 587
                self.match(Python3Parser.COMMA)
                self.state = 588
                self.match(Python3Parser.NAME)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(Python3Parser.NONLOCAL)
            self.state = 595
            self.match(Python3Parser.NAME)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 596
                self.match(Python3Parser.COMMA)
                self.state = 597
                self.match(Python3Parser.NAME)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(Python3Parser.ASSERT)
            self.state = 604
            self.test()
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 605
                self.match(Python3Parser.COMMA)
                self.state = 606
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compound_stmt)
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 611
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 612
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 613
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 614
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 615
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 616
                self.decorated()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 617
                self.async_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(Python3Parser.ASYNC)
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DEF]:
                self.state = 621
                self.funcdef()
                pass
            elif token in [Python3Parser.WITH]:
                self.state = 622
                self.with_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.state = 623
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(Python3Parser.IF)
            self.state = 627
            self.test()
            self.state = 628
            self.match(Python3Parser.COLON)
            self.state = 629
            self.suite()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 630
                self.match(Python3Parser.ELIF)
                self.state = 631
                self.test()
                self.state = 632
                self.match(Python3Parser.COLON)
                self.state = 633
                self.suite()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 640
                self.match(Python3Parser.ELSE)
                self.state = 641
                self.match(Python3Parser.COLON)
                self.state = 642
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(Python3Parser.WHILE)
            self.state = 646
            self.test()
            self.state = 647
            self.match(Python3Parser.COLON)
            self.state = 648
            self.suite()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 649
                self.match(Python3Parser.ELSE)
                self.state = 650
                self.match(Python3Parser.COLON)
                self.state = 651
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(Python3Parser.FOR)
            self.state = 655
            self.exprlist()
            self.state = 656
            self.match(Python3Parser.IN)
            self.state = 657
            self.testlist()
            self.state = 658
            self.match(Python3Parser.COLON)
            self.state = 659
            self.suite()
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 660
                self.match(Python3Parser.ELSE)
                self.state = 661
                self.match(Python3Parser.COLON)
                self.state = 662
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(Python3Parser.TRY)
            self.state = 666
            self.match(Python3Parser.COLON)
            self.state = 667
            self.suite()
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 672 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 668
                    self.except_clause()
                    self.state = 669
                    self.match(Python3Parser.COLON)
                    self.state = 670
                    self.suite()
                    self.state = 674 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 676
                    self.match(Python3Parser.ELSE)
                    self.state = 677
                    self.match(Python3Parser.COLON)
                    self.state = 678
                    self.suite()


                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 681
                    self.match(Python3Parser.FINALLY)
                    self.state = 682
                    self.match(Python3Parser.COLON)
                    self.state = 683
                    self.suite()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 686
                self.match(Python3Parser.FINALLY)
                self.state = 687
                self.match(Python3Parser.COLON)
                self.state = 688
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(Python3Parser.WITH)
            self.state = 692
            self.with_item()
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 693
                self.match(Python3Parser.COMMA)
                self.state = 694
                self.with_item()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 700
            self.match(Python3Parser.COLON)
            self.state = 701
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.test()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 704
                self.match(Python3Parser.AS)
                self.state = 705
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(Python3Parser.EXCEPT)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                self.state = 709
                self.test()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 710
                    self.match(Python3Parser.AS)
                    self.state = 711
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.simple_stmt()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.match(Python3Parser.NEWLINE)
                self.state = 718
                self.match(Python3Parser.INDENT)
                self.state = 720 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 719
                    self.stmt()
                    self.state = 722 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (1 << (Python3Parser.AT - 66)))) != 0)):
                        break

                self.state = 724
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.or_test()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 729
                    self.match(Python3Parser.IF)
                    self.state = 730
                    self.or_test()
                    self.state = 731
                    self.match(Python3Parser.ELSE)
                    self.state = 732
                    self.test()


                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_test_nocond)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(Python3Parser.LAMBDA)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 744
                self.varargslist()


            self.state = 747
            self.match(Python3Parser.COLON)
            self.state = 748
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(Python3Parser.LAMBDA)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 751
                self.varargslist()


            self.state = 754
            self.match(Python3Parser.COLON)
            self.state = 755
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.and_test()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 758
                self.match(Python3Parser.OR)
                self.state = 759
                self.and_test()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.not_test()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 766
                self.match(Python3Parser.AND)
                self.state = 767
                self.not_test()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_not_test)
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 773
                self.match(Python3Parser.NOT)
                self.state = 774
                self.not_test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.expr()
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (Python3Parser.IN - 18)) | (1 << (Python3Parser.NOT - 18)) | (1 << (Python3Parser.IS - 18)) | (1 << (Python3Parser.LESS_THAN - 18)) | (1 << (Python3Parser.GREATER_THAN - 18)) | (1 << (Python3Parser.EQUALS - 18)) | (1 << (Python3Parser.GT_EQ - 18)) | (1 << (Python3Parser.LT_EQ - 18)) | (1 << (Python3Parser.NOT_EQ_1 - 18)) | (1 << (Python3Parser.NOT_EQ_2 - 18)))) != 0):
                self.state = 779
                self.comp_op()
                self.state = 780
                self.expr()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_comp_op)
        try:
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 791
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 792
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 793
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 794
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 795
                self.match(Python3Parser.NOT)
                self.state = 796
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 797
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 798
                self.match(Python3Parser.IS)
                self.state = 799
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(Python3Parser.STAR)
            self.state = 803
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Xor_exprContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.xor_expr()
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 806
                self.match(Python3Parser.OR_OP)
                self.state = 807
                self.xor_expr()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_exprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.XOR)
            else:
                return self.getToken(Python3Parser.XOR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.and_expr()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.XOR:
                self.state = 814
                self.match(Python3Parser.XOR)
                self.state = 815
                self.and_expr()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Shift_exprContext,i)


        def AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND_OP)
            else:
                return self.getToken(Python3Parser.AND_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.shift_expr()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND_OP:
                self.state = 822
                self.match(Python3Parser.AND_OP)
                self.state = 823
                self.shift_expr()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Arith_exprContext,i)


        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.LEFT_SHIFT)
            else:
                return self.getToken(Python3Parser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.RIGHT_SHIFT)
            else:
                return self.getToken(Python3Parser.RIGHT_SHIFT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.arith_expr()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT:
                self.state = 830
                _la = self._input.LA(1)
                if not(_la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 831
                self.arith_expr()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.term()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ADD or _la==Python3Parser.MINUS:
                self.state = 838
                _la = self._input.LA(1)
                if not(_la==Python3Parser.ADD or _la==Python3Parser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 839
                self.term()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STAR)
            else:
                return self.getToken(Python3Parser.STAR, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AT)
            else:
                return self.getToken(Python3Parser.AT, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DIV)
            else:
                return self.getToken(Python3Parser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MOD)
            else:
                return self.getToken(Python3Parser.MOD, i)

        def IDIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.IDIV)
            else:
                return self.getToken(Python3Parser.IDIV, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.factor()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (Python3Parser.STAR - 51)) | (1 << (Python3Parser.DIV - 51)) | (1 << (Python3Parser.MOD - 51)) | (1 << (Python3Parser.IDIV - 51)) | (1 << (Python3Parser.AT - 51)))) != 0):
                self.state = 846
                _la = self._input.LA(1)
                if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (Python3Parser.STAR - 51)) | (1 << (Python3Parser.DIV - 51)) | (1 << (Python3Parser.MOD - 51)) | (1 << (Python3Parser.IDIV - 51)) | (1 << (Python3Parser.AT - 51)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 847
                self.factor()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(Python3Parser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 854
                self.factor()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.atom_expr()
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.POWER:
                self.state = 859
                self.match(Python3Parser.POWER)
                self.state = 860
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AWAIT:
                self.state = 863
                self.match(Python3Parser.AWAIT)


            self.state = 866
            self.atom()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DOT) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0):
                self.state = 867
                self.trailer()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_paren(self):
            return self.getTypedRuleContext(Python3Parser.Open_parenContext,0)


        def close_paren(self):
            return self.getTypedRuleContext(Python3Parser.Close_parenContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.state = 873
                self.open_paren()
                self.state = 876
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 874
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 875
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 878
                self.close_paren()
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.state = 880
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 881
                    self.testlist_comp()


                self.state = 884
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.state = 885
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 886
                    self.dictorsetmaker()


                self.state = 889
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 890
                self.match(Python3Parser.NAME)
                pass
            elif token in [Python3Parser.NUMBER]:
                self.state = 891
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.STRING]:
                self.state = 893 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 892
                    self.match(Python3Parser.STRING)
                    self.state = 895 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.STRING):
                        break

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.state = 897
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.state = 898
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.state = 899
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.state = 900
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 903
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 904
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                self.state = 907
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 908
                        self.match(Python3Parser.COMMA)
                        self.state = 911
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                            self.state = 909
                            self.test()
                            pass
                        elif token in [Python3Parser.STAR]:
                            self.state = 910
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 917
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 918
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_paren(self):
            return self.getTypedRuleContext(Python3Parser.Open_parenContext,0)


        def close_paren(self):
            return self.getTypedRuleContext(Python3Parser.Close_parenContext,0)


        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.open_paren()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 924
                    self.arglist()


                self.state = 927
                self.close_paren()
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 930
                self.subscriptlist()
                self.state = 931
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 933
                self.match(Python3Parser.DOT)
                self.state = 934
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.subscript()
            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 938
                    self.match(Python3Parser.COMMA)
                    self.state = 939
                    self.subscript() 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 945
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 949
                    self.test()


                self.state = 952
                self.match(Python3Parser.COLON)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 953
                    self.test()


                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 956
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(Python3Parser.COLON)
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                self.state = 962
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 965
                self.expr()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 966
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 976
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 969
                    self.match(Python3Parser.COMMA)
                    self.state = 972
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 970
                        self.expr()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 971
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 978
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 979
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.test()
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 983
                    self.match(Python3Parser.COMMA)
                    self.state = 984
                    self.test() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 990
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 999
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 993
                    self.test()
                    self.state = 994
                    self.match(Python3Parser.COLON)
                    self.state = 995
                    self.test()
                    pass
                elif token in [Python3Parser.POWER]:
                    self.state = 997
                    self.match(Python3Parser.POWER)
                    self.state = 998
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1019
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                    self.state = 1001
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1013
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1002
                            self.match(Python3Parser.COMMA)
                            self.state = 1009
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                                self.state = 1003
                                self.test()
                                self.state = 1004
                                self.match(Python3Parser.COLON)
                                self.state = 1005
                                self.test()
                                pass
                            elif token in [Python3Parser.POWER]:
                                self.state = 1007
                                self.match(Python3Parser.POWER)
                                self.state = 1008
                                self.expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1015
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1016
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1023
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 1021
                    self.test()
                    pass
                elif token in [Python3Parser.STAR]:
                    self.state = 1022
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1039
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                    self.state = 1025
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1033
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1026
                            self.match(Python3Parser.COMMA)
                            self.state = 1029
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                                self.state = 1027
                                self.test()
                                pass
                            elif token in [Python3Parser.STAR]:
                                self.state = 1028
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1035
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1036
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def open_paren(self):
            return self.getTypedRuleContext(Python3Parser.Open_parenContext,0)


        def close_paren(self):
            return self.getTypedRuleContext(Python3Parser.Close_parenContext,0)


        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(Python3Parser.CLASS)
            self.state = 1044
            self.match(Python3Parser.NAME)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 1045
                self.open_paren()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                    self.state = 1046
                    self.arglist()


                self.state = 1049
                self.close_paren()


            self.state = 1053
            self.match(Python3Parser.COLON)
            self.state = 1054
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.argument()
            self.state = 1061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1057
                    self.match(Python3Parser.COMMA)
                    self.state = 1058
                    self.argument() 
                self.state = 1063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1064
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1067
                self.test()
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FOR or _la==Python3Parser.ASYNC:
                    self.state = 1068
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 1071
                self.test()
                self.state = 1072
                self.match(Python3Parser.ASSIGN)
                self.state = 1073
                self.test()
                pass

            elif la_ == 3:
                self.state = 1075
                self.match(Python3Parser.POWER)
                self.state = 1076
                self.test()
                pass

            elif la_ == 4:
                self.state = 1077
                self.match(Python3Parser.STAR)
                self.state = 1078
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_comp_iter)
        try:
            self.state = 1083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR, Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASYNC:
                self.state = 1085
                self.match(Python3Parser.ASYNC)


            self.state = 1088
            self.match(Python3Parser.FOR)
            self.state = 1089
            self.exprlist()
            self.state = 1090
            self.match(Python3Parser.IN)
            self.state = 1091
            self.or_test()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.IF) | (1 << Python3Parser.FOR) | (1 << Python3Parser.ASYNC))) != 0):
                self.state = 1092
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(Python3Parser.IF)
            self.state = 1096
            self.test_nocond()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.IF) | (1 << Python3Parser.FOR) | (1 << Python3Parser.ASYNC))) != 0):
                self.state = 1097
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(Python3Parser.YIELD)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.ADD - 66)) | (1 << (Python3Parser.MINUS - 66)) | (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)))) != 0):
                self.state = 1103
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_yield_arg)
        try:
            self.state = 1109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.match(Python3Parser.FROM)
                self.state = 1107
                self.test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.AWAIT, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_parenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_open_paren

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_paren" ):
                listener.enterOpen_paren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_paren" ):
                listener.exitOpen_paren(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_paren" ):
                return visitor.visitOpen_paren(self)
            else:
                return visitor.visitChildren(self)




    def open_paren(self):

        localctx = Python3Parser.Open_parenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_open_paren)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(Python3Parser.OPEN_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_parenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_close_paren

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_paren" ):
                listener.enterClose_paren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_paren" ):
                listener.exitClose_paren(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_paren" ):
                return visitor.visitClose_paren(self)
            else:
                return visitor.visitChildren(self)




    def close_paren(self):

        localctx = Python3Parser.Close_parenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_close_paren)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





